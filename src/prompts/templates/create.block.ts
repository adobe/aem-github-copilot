export const SYSTEM_MESSAGE = `
---
Your task is to generate a JSON structure for a new **AEM Edge Delivery Services block**. This includes JavaScript and CSS files, a markdown table representation, and sample input HTML based on the provided requirements.  
Additionally, a **sample reference block** and **sample assistant output** are provided for guidance. Your output must closely follow the format and structure of the sample.  
---  
### **Requirements**:
1. **Extract Block Name**:  
   - Extract the block name from the user's input to use as the base for generating files and structures.  

2. **Generate Markdown Table**:  
   - Create a markdown table representation of the block structure.  
   - Each row should represent a component or element within the block.  
   - The first row should list only the block name.  
   - For example:  
     - If the block consists of tabs, the markdown table should list each tab and its corresponding content.  

3. **Create Input HTML Structure**:  
   - Use the markdown table as the basis for generating the input HTML.  
   - Each row in the markdown table corresponds to a \`<div>\` element in the input HTML.  
   - Represent elements (cells) within each row as nested \`<div>\` elements.  
   - **Restrictions**:  
     - Internal \`<div>\` elements must not have any classes, IDs, or other attributes.  
     - Only the outermost block element should have specific classes or attributes.  

4. **Folder/File Structures**:  
   - Generate the following files based on the extracted block name:  
     - \`block_name.js\`  
     - \`block_name.css\`  
   - Ensure the generated JavaScript and CSS files are complete and functional.  

5. **Functionality of Edge Delivery Services Block**:  
   - Ensure the generated block is fully functional as per the input requirements or block name/type.  

6. **CSS Styling**:  
   - Use the \`block_name.css\` file to define styles for the block.  
   - Add fixed height and width for proper display.  
   - Avoid adding styles in the JavaScript file.  

7. **JavaScript Functionality**:  
   - The JavaScript file must contain a \`decorate\` function that takes the block input (an HTML element) and enhances it based on the block type.  
   - Use the \`decorate\` method to:  
     - Add necessary classes or IDs for styling or functionality.  
     - Implement the required block-specific behavior.  
   - Avoid adding styles directly in the JavaScript file.  

8. **Global and Framework Support**:  
   - Use the following additional resources as needed:  
     - \`global.js\`: Contains custom global JavaScript code and triggers block loading.  
     - \`global.css\`: Hosts global styling for the site, including layout details required for LCP.  
     - **AEM Framework JavaScript**: Leverage built-in AEM Framework methods wherever applicable.  

9. **Reference Material**:  
   - A **sample relevant block** is provided as a reference for structure and implementation.  
   - A **sample assistant output** is also provided. Your output should closely align with the format, structure, and level of detail in the sample.  

### **Output Format**:
- Strictly generate **valid JSON only**.  
- Ensure the JSON output contains:  
  1. A markdown table representation of the block structure.  
  2. A complete and functional \`block_name.js\` file.  
  3. A complete and functional \`block_name.css\` file.  
  4. The input HTML structure.  
- **Do not provide placeholders or incomplete snippets**.  
- If unable to generate the required output, respond with: \`"I can't help with that"\`.  

### **Additional Notes**:
1. **HTML Structure**:  
   - Only \`<div>\` elements should be used to represent the block structure.  
   - Do not add any classes, IDs, or other attributes to internal \`<div>\` elements.  
   - Classes and IDs may only be added using the \`decorate\` method in the JavaScript file.  

2. **CSS Guidelines**:  
   - Use \`global.css\` for global layout and styling information when appropriate.  
   - Do not include comments like \`/* add your styles here */\`.  

3. **JavaScript Guidelines**:  
   - Use \`global.js\` for shared JavaScript functionality where needed.  
   - Use AEM Framework JavaScript methods for efficient and consistent implementation.  

4. **Content**:  
   - Focus on text-based content for the block. Avoid using images or other media.  

5. **Edge Delivery Compliance**:  
   - Ensure the block adheres to Edge Delivery Services' standards for functionality and styling.  

### **Sample Reference Block**:
- A relevant block example has been provided. Use it to understand the structure and implementation style.  

### **Sample Assistant Output**:
- An example of valid output generated by the assistant is provided. Your output must follow this format, structure, and level of detail.  

---
`;


export const SAMPLE_USER_MESSAGE = `a tabs block that show a list of tabs and their content`;



export const SAMPLE_ASSISTANT_OUTPUT = {
  tree: {
    name: "tabs",
    type: "directory",
    children: [
      {
        name: "tabs.js",
        type: "file",
      },
      {
        name: "tabs.css",
        type: "file",
      },
    ],
  },
  files: [
    {
      type: "javascript",
      path: "blocks/tabs/tabs.js",
      content: `
      function hasWrapper(el) {
        return !!el.firstElementChild && window.getComputedStyle(el.firstElementChild).display === 'block';
      }
      export default async function decorate(block) {
        const tablist = document.createElement('div');
        tablist.className = 'tabs-list';
        const tabs = [...block.children].map((child) => child.firstElementChild);
        tabs.forEach((tab, i) => {
          const id = "tab-" + i;
          const tabpanel = block.children[i];
          tabpanel.className = 'tabs-panel';
          tabpanel.id = \`tabpanel-\${id}\`;
          const button = document.createElement('button');
          button.className = 'tabs-tab';
          button.innerHTML = tab.innerHTML;
          button.setAttribute('type', 'button');
          button.addEventListener('click', () => {
            block.querySelectorAll('[role=tabpanel]').forEach((panel) => {
              panel.setAttribute('aria-hidden', true);
            });
            tablist.querySelectorAll('button').forEach((btn) => {
              btn.setAttribute('aria-selected', false);
            });
          });
          tablist.append(button);
          tab.remove();
        });
        block.prepend(tablist);
      }
    `,
      name: "tabs.js",
    },
    {
      type: "css",
      path: "blocks/tabs/tabs.css",
      content: `
      .tabs .tabs-list {
        display: flex;
        gap: 8px;
        max-width: 100%;
      }
      .tabs .tabs-list button {
        flex: 0 0 max-content;
        padding: 8px 16px;
        overflow: unset;
      }
      .tabs .tabs-list button[aria-selected="true"] {
        background-color: white;
      }
      .tabs .tabs-panel[aria-hidden="true"] {
        display: none;
      }
    `,
      name: "tabs.css",
    },
  ],
  mdtable: `
  | Tabs    |              |
  |---------|--------------|
  | Tab1    | tab one text | 
  | Tab Two | tab two text |
`,
  inputHtml: `
<div>
  <div>
    <div>Tab One</div>
    <div>tab one text</div>
  </div>
  <div>
    <div>Tab Two</div>
    <div>tab two text</div>
  </div>
</div>
  `,
};

export const SAMPLE_USER_MESSAGE_2 = `a table block`;

export const SAMPLE_ASSISTANT_OUTPUT_2 = {
  tree: {
    name: "table",
    type: "directory",
    children: [
      {
        name: "table.js",
        type: "file",
      },
      {
        name: "table.css",
        type: "file",
      },
    ],
  },
  files: [
    {
      type: "javascript",
      path: "blocks/table/table.js",
      content: `
      function buildCell(rowIndex) {
      const cell = rowIndex ? document.createElement('td') : document.createElement('th');
      if (!rowIndex) cell.setAttribute('scope', 'col');
      return cell;
    }

    export default async function decorate(block) {
      const table = document.createElement('table');
      const thead = document.createElement('thead');
      const tbody = document.createElement('tbody');

      const header = !block.classList.contains('no-header');
      if (header) {
        table.append(thead);
      }
      table.append(tbody);

      [...block.children].forEach((child, i) => {
        const row = document.createElement('tr');
        if (header && i === 0) thead.append(row);
        else tbody.append(row);
        [...child.children].forEach((col) => {
          const cell = buildCell(header ? i : i + 1);
          cell.innerHTML = col.innerHTML;
          row.append(cell);
        });
      });
      block.innerHTML = '';
      block.append(table);
    }
    `,
      name: "table.js",
    },
    {
      type: "css",
      path: "blocks/table/tabs.css",
      content: `
.table {
  width: 100%;
  overflow-x: auto;
}
.table table {
  width: 100%;
  max-width: 100%;
}
.table table tbody tr {
  border-bottom: 1px solid;
}
.table table th,
.table table td {
  padding: 8px 16px;
}
.table.no-header table tbody tr {
  border-top: 1px solid;
}
    `,
      name: "table.css",
    },
  ],
  mdtable: `
  | table    |
  |----------|
  | Name     |
  | John     |
`,
  inputHtml: `
    <div>
          <div>
            <div>Name</div>
            <div>Age</div>
          </div>
          <div>
            <div>John</div>
            <div>25</div>
          </div>
    </div>
      `,
};

export const SAMPLE_USER_MESSAGE_3 = `a carousel block`;

export const SAMPLE_ASSISTANT_OUTPUT_3 = {
  tree: {
    name: "carousel",
    type: "directory",
    children: [
      {
        name: "carousel.js",
        type: "file",
      },
      {
        name: "carousel.css",
        type: "file",
      },
    ],
  },
  files: [
    {
      type: "javascript",
      path: "blocks/carousel/carousel.js",
      content: `
import { fetchPlaceholders } from '../../scripts/aem.js';

const updateActiveSlide = (slide) => {
  const block = slide.closest('.carousel');
  const slideIndex = parseInt(slide.dataset.slideIndex, 10);
  block.dataset.activeSlide = slideIndex;

  const slides = block.querySelectorAll('.carousel-slide');
  slides.forEach((aSlide, idx) => {
    aSlide.setAttribute('aria-hidden', idx !== slideIndex);
    aSlide.querySelectorAll('a').forEach((link) => {
      link.setAttribute('tabindex', idx !== slideIndex ? '-1' : '0');
    });
  });

  const indicators = block.querySelectorAll('.carousel-slide-indicator');
  indicators.forEach((indicator, idx) => {
    indicator.querySelector('button').disabled = idx === slideIndex;
  });
};

const showSlide = (block, slideIndex = 0) => {
  const slides = block.querySelectorAll('.carousel-slide');
  const realSlideIndex = (slideIndex < 0) ? slides.length - 1 : (slideIndex >= slides.length) ? 0 : slideIndex;
  const activeSlide = slides[realSlideIndex];

  activeSlide.querySelectorAll('a').forEach((link) => link.removeAttribute('tabindex'));
  block.querySelector('.carousel-slides').scrollTo({
    top: 0,
    left: activeSlide.offsetLeft,
    behavior: 'smooth',
  });
};

const bindEvents = (block) => {
  const slideIndicators = block.querySelector('.carousel-slide-indicators');
  if (!slideIndicators) return;

  slideIndicators.querySelectorAll('button').forEach((button) => {
    button.addEventListener('click', (e) => {
      const slideIndicator = e.currentTarget.parentElement;
      showSlide(block, parseInt(slideIndicator.dataset.targetSlide, 10));
    });
  });

  block.querySelector('.slide-prev').addEventListener('click', () => {
    showSlide(block, parseInt(block.dataset.activeSlide, 10) - 1);
  });
  block.querySelector('.slide-next').addEventListener('click', () => {
    showSlide(block, parseInt(block.dataset.activeSlide, 10) + 1);
  });

  const slideObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) updateActiveSlide(entry.target);
    });
  }, { threshold: 0.5 });

  block.querySelectorAll('.carousel-slide').forEach((slide) => {
    slideObserver.observe(slide);
  });
};

const createSlide = (row, slideIndex, carouselId) => {
  const slide = document.createElement('li');
  slide.dataset.slideIndex = slideIndex;
  slide.id = \`carousel-\${carouselId}-slide-\${slideIndex}\`;
  slide.classList.add('carousel-slide');

  row.querySelectorAll(':scope > div').forEach((column, colIdx) => {
    column.classList.add(\`carousel-slide-\${colIdx === 0 ? 'image' : 'content'}\`);
    slide.append(column);
  });

  const labeledBy = slide.querySelector('h1, h2, h3, h4, h5, h6');
  if (labeledBy) {
    slide.setAttribute('aria-labelledby', labeledBy.id);
  }

  return slide;
};

let carouselId = 0;
export default async function decorate(block) {
  carouselId += 1;
  block.id = \`carousel-\${carouselId}\`;
  const rows = block.querySelectorAll(':scope > div');
  const isSingleSlide = rows.length < 2;

  const placeholders = await fetchPlaceholders();

  block.setAttribute('role', 'region');
  block.setAttribute('aria-roledescription', placeholders.carousel || 'Carousel');

  const container = document.createElement('div');
  container.classList.add('carousel-slides-container');

  const slidesWrapper = document.createElement('ul');
  slidesWrapper.classList.add('carousel-slides');
  block.prepend(slidesWrapper);

  let slideIndicators;
  if (!isSingleSlide) {
    const slideIndicatorsNav = document.createElement('nav');
    slideIndicatorsNav.setAttribute('aria-label', placeholders.carouselSlideControls || 'Carousel Slide Controls');
    slideIndicators = document.createElement('ol');
    slideIndicators.classList.add('carousel-slide-indicators');
    slideIndicatorsNav.append(slideIndicators);
    block.append(slideIndicatorsNav);

    const slideNavButtons = document.createElement('div');
    slideNavButtons.classList.add('carousel-navigation-buttons');
    slideNavButtons.innerHTML = \`
      <button type="button" class="slide-prev" aria-label="\${placeholders.previousSlide || 'Previous Slide'}"></button>
      <button type="button" class="slide-next" aria-label="\${placeholders.nextSlide || 'Next Slide'}"></button>
    \`;

    container.append(slideNavButtons);
  }

  rows.forEach((row, idx) => {
    const slide = createSlide(row, idx, carouselId);
    slidesWrapper.append(slide);

    if (slideIndicators) {
      const indicator = document.createElement('li');
      indicator.classList.add('carousel-slide-indicator');
      indicator.dataset.targetSlide = idx;
      indicator.innerHTML = \`<button type="button" aria-label="\${placeholders.showSlide || 'Show Slide'} \${idx + 1} \${placeholders.of || 'of'} \${rows.length}"></button>\`;
      slideIndicators.append(indicator);
    }
    row.remove();
  });

  container.append(slidesWrapper);
  block.prepend(container);

  if (!isSingleSlide) {
    bindEvents(block);
  }
}
`,
      name: "carousel.js",
    },
    {
      type: "css",
      path: "blocks/carousel/carousel.css",
      content: `
.carousel .carousel-slides-container {
  position: relative;
}

.carousel .carousel-slides,
.carousel .carousel-slide-indicators {
  list-style: none;
  margin: 0;
  padding: 0;
}

.carousel .carousel-slides {
  display: flex;
  scroll-behavior: smooth;
  scroll-snap-type: x mandatory;
  overflow: scroll clip;
}

.carousel .carousel-slides::-webkit-scrollbar {
  display: none;
}

.carousel .carousel-slide {
  flex: 0 0 100%;
  scroll-snap-align: start;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  position: relative;
  width: 100%;
  min-height: min(50vw, calc(100dvh - var(--header-height)));
}

.carousel .carousel-slide:has(.carousel-slide-content[data-align='center']) {
  align-items: center;
}

.carousel .carousel-slide:has(.carousel-slide-content[data-align='right']) {
  align-items: flex-end;
}

.carousel .carousel-slide.carousel-slide-image picture {
  position: absolute;
  inset: 0;
}

.carousel .carousel-slide.carousel-slide-image picture > img {
  height: 100%;
  width: 100%;
  object-fit: cover;
}

.carousel .carousel-slide.carousel-slide-content {
  z-index: 1;
  margin: 68px;
  padding: 16px;
  color: white;
  background-color: rgba(19, 19, 19, 0.75);
  position: relative;
  width: var(--slide-content-width, auto);
}

.carousel .carousel-slide-indicators {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 6px 12px;
  padding: 12px;
  background-color: var(--light-color);
  line-height: 0;
}

.carousel .carousel-slide-indicator button {
  width: 24px;
  height: 24px;
  margin: 0;
  padding: 0;
  border-radius: 50%;
  background-color: #dadada;
  transition: background-color 0.2s;
}

.carousel .carousel-slide-indicator button:disabled,
.carousel .carousel-slide-indicator button:hover,
.carousel .carousel-slide-indicator button:focus-visible {
  background-color: var(--text-color);
}

.carousel .carousel-navigation-buttons {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: 12px;
  right: 12px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  z-index: 1;
}

.carousel .carousel-navigation-buttons button {
  position: relative;
  width: 44px;
  height: 44px;
  margin: 0;
  border-radius: 50%;
  padding: 0;
  background-color: rgba(19, 19, 19, 0.25);
  transition: background-color 0.2s;
}

.carousel .carousel-navigation-buttons button:hover,
.carousel .carousel-navigation-buttons button:focus-visible {
  background-color: rgba(19, 19, 19, 0.75);
}

.carousel .carousel-navigation-buttons button::after {
  display: block;
  content: '';
  border: 2px solid;
  border-bottom: 0;
  border-left: 0;
  height: 12px;
  width: 12px;
  position: absolute;
  top: 50%;
  left: calc(50% + 2px);
  transform: translate(-50%, -50%) rotate(-135deg);
}

.carousel .carousel-navigation-buttons button.slide-next::after {
  transform: translate(-50%, -50%) rotate(45deg);
  left: calc(50% - 2px);
}

@media (min-width: 600px) {
  .carousel .carousel-navigation-buttons {
    left: 24px;
    right: 24px;
  }

  .carousel .carousel-slide.carousel-slide-content {
    --slide-content-width: calc((100% - 184px) / 2);
    margin: 92px;
  }

  .carousel .carousel-slide.carousel-slide-content[data-align='justify'] {
    --slide-content-width: auto;
  }
}
`,
    },
  ],
};





export const SYSTEM_MESSAGE_NEW = `
---
Your task is to generate a JSON structure for a new **AEM Edge Delivery Services block**. This includes JavaScript and CSS files, a markdown table representation, and sample input HTML based on the provided requirements.  
Additionally, a **sample reference block** and **sample assistant output** are provided for guidance. Your output must closely follow the format and structure of the sample.  
---  
### **Requirements**:

1. **Extract Block Name**:  
   - Extract the block name and style from the user's input to use as the base for generating block javascript and css files.

2. **Folder/File Structures**:  
   - Generate the following files based on the extracted block name:  
     - \`block_name.js\`  
     - \`block_name.css\`  
   - Ensure the generated JavaScript and CSS files are complete and functional.
   - Use the referenced block code to generate the new block code.

3. **Functionality of Edge Delivery Services Block**:  
   - Ensure the generated block is fully functional as per the input requirements or block name/type.  

4. **CSS Styling**:  
   - Use the \`block_name.css\` file to define styles for the block.  
   - Add fixed height and width for proper display.  
   - Avoid adding styles in the JavaScript file.  

5. **JavaScript Functionality**:  
   - The JavaScript file must contain a \`decorate\` function that takes the block input (an HTML element) and enhances it based on the block type.  
   - Use the \`decorate\` method to:  
     - Add necessary classes or IDs for styling or functionality.  
     - Implement the required block-specific behavior.  
   - Avoid adding styles directly in the JavaScript file.  

6. **Global and Framework Support**:  
   - Use the following additional resources as needed:  
     - \`global.js\`: Contains custom global JavaScript code and triggers block loading.  
     - \`global.css\`: Hosts global styling for the site, including layout details required for LCP.  
     - **AEM Framework JavaScript**: Leverage built-in AEM Framework methods wherever applicable.  

7. **Reference Material**:  
   - A **sample relevant block** is provided as a reference for structure and implementation.  
   - A **sample assistant output** is also provided. Your output should closely align with the format, structure, and level of detail in the sample.  

### **Output Format**:
- Strictly generate **valid JSON only**.  
- Ensure the JSON output contains:  
  1. A markdown table representation of the block structure.  
  2. A complete and functional \`block_name.js\` file.  
  3. A complete and functional \`block_name.css\` file.  
  4. The input HTML structure.  
- **Do not provide placeholders or incomplete snippets**.  
- If unable to generate the required output, respond with: \`"I can't help with that"\`.  

### **Additional Notes**:
1. **HTML Structure**:  
   - Only \`<div>\` elements should be used to represent the block structure.  
   - Do not add any classes, IDs, or other attributes to internal \`<div>\` elements.  
   - Classes and IDs may only be added using the \`decorate\` method in the JavaScript file.  

2. **CSS Guidelines**:  
   - Use \`global.css\` for global layout and styling information when appropriate.  
   - Do not include comments like \`/* add your styles here */\`.  

3. **JavaScript Guidelines**:  
   - Use \`global.js\` for shared JavaScript functionality where needed.  
   - Use AEM Framework JavaScript methods for efficient and consistent implementation.  

4. **Content**:  
   - Focus on text-based content for the block. Avoid using images or other media.  

5. **Edge Delivery Compliance**:  
   - Ensure the block adheres to Edge Delivery Services' standards for functionality and styling.  

### **Sample Reference Block**:
- A relevant block example has been provided. Use it to understand the structure and implementation style.  

### **Sample Assistant Output**:
- An example of valid output generated by the assistant is provided. Your output must follow this format, structure, and level of detail.  

---
`;


export const SAMPLE_ASSISTANT_OUTPUT_NEW = {
  tree: {
    name: "blockname",
    type: "directory",
    children: [
      { name: "blockname.js", type: "file" },
      { name: "blockname.css", type: "file" },
    ],
  },
  files: [
    {
      type: "javascript",
      path: "blocks/blockname/blockname.js",
      content: `
      function hasWrapper(el) {
        return !!el.firstElementChild && window.getComputedStyle(el.firstElementChild).display === 'block';
      }
      export default async function decorate(block) {
        const blocklist = document.createElement('div');
        blocklist.className = 'blockname-list';
        const blocks = [...block.children].map((child) => child.firstElementChild);
        blocks.forEach((block, i) => {
          const id = "block-" + i;
          const blockpanel = block.children[i];
          blocklist.append(button);
          block.remove();
        });
        block.prepend(blocklist);
      }
    `,
      name: "blockname.js",
    },
    {
      type: "css",
      path: "blocks/blockname/blockname.css",
      content: `
      .blockname .blockname-list {
        display: flex;
        gap: 8px;
        max-width: 100%;
      }
    `,
      name: "blockname.css",
    },
  ]
  ,
};